tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint describes the basic infrastrcuture architecture for any AWS blueprint.

imports:
  - http://www.getcloudify.org/spec/cloudify/4.2/types.yaml
  - http://www.getcloudify.org/spec/awssdk-plugin/1.2.0.1/plugin.yaml
  - https://github.com/cloudify-cosmo/cloudify-aws-plugin/releases/download/1.5.1.2/plugin.yaml

inputs:

  vpc_id:
    default: { get_secret: vpc_id }

  public_subnet_id:
    default: { get_secret: public_subnet_id }

  private_subnet_id:
    default: { get_secret: private_subnet_id }

  security_group_rules:
    default:
    - IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      IpRanges:
      - CidrIp: 0.0.0.0/0

dsl_definitions:

    client_config: &client_config
      aws_access_key_id: { get_secret: aws_access_key_id }
      aws_secret_access_key: { get_secret: aws_secret_access_key }
      region_name: { get_secret: ec2_region_name }

node_templates:

  public_ip:
    type: cloudify.nodes.aws.ec2.ElasticIP
    properties:
      resource_config:
        kwargs:
          Domain: 'vpc'
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: public_subnet_nic

  private_subnet_nic:
    type: cloudify.nodes.aws.ec2.Interface
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          Description: Created by template-blueprint aws-blueprint.yaml.
          SubnetId: { get_input: private_subnet_id }
    relationships:
      - type: cloudify.relationships.depends_on
        target: private_subnet
      - type: cloudify.relationships.depends_on
        target: security_group
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          inputs:
            resource_config:
              Description: Created by template-blueprint aws-blueprint.yaml.
              SubnetId: { get_input: public_subnet_id }
              Groups:
              - { get_attribute: [ security_group, aws_resource_id ] }

  public_subnet_nic:
    type: cloudify.nodes.aws.ec2.Interface
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          Description: Created by template-blueprint aws-blueprint.yaml.
          SubnetId: { get_input: public_subnet_id }
    relationships:
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.relationships.depends_on
        target: security_group
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          inputs:
            resource_config:
              Description: Created by template-blueprint aws-blueprint.yaml.
              SubnetId: { get_input: public_subnet_id }
              Groups:
              - { get_attribute: [ security_group, aws_resource_id ] }

  security_group_rules:
    type: cloudify.nodes.aws.ec2.SecurityGroupRuleIngress
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          IpPermissions: { get_input: security_group_rules }
    relationships:
    - type: cloudify.relationships.contained_in
      target: security_group

  security_group:
    type: cloudify.nodes.aws.ec2.SecurityGroup
    properties:
      resource_config:
        kwargs:
          GroupName: ExampleSecurityGroup
          Description: Created by template-blueprint aws-blueprint.yaml.
          VpcId: { get_input: vpc_id }
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: vpc

  public_subnet:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      client_config: *client_config
      use_external_resource: true
      resource_id: { get_input: public_subnet_id }
      resource_config:
        kwargs:
          CidrBlock: 'N/A'
          AvailabilityZone: 'N/A'
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc

  private_subnet:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      client_config: *client_config
      use_external_resource: true
      resource_id: { get_input: private_subnet_id }
      resource_config:
        kwargs:
          CidrBlock: 'N/A'
          AvailabilityZone: 'N/A'
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc

  vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      client_config: *client_config
      use_external_resource: true
      resource_id: { get_input: vpc_id }
      resource_config:
        kwargs:
          CidrBlock: 'N/A'
